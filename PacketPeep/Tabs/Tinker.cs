using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net.Http.Headers;
using System.Numerics;
using Aero.Gen;
using Aero.Gen.Attributes;
using ImGuiNET;
using ImTool;
using PacketPeep.FauFau.Formats;
using PacketPeep.Systems;
using PacketPeep.Systems.Tinker;
using PacketPeep.Widgets;
using Message = FauCap.Message;

namespace PacketPeep.Tabs
{
    public class TinkerTab : Tab
    {
        public override string Name => "Tinker";

        private ReplayServer RServer;
        private MetaSection  Meta;
        private Stopwatch    PlaybackTimespan = Stopwatch.StartNew();
        private bool         ResendOnChange   = true;

        private Scene Scene     = new();
        private uint  Timestamp = 1;

        private HexView       inspectorHexView;
        private AeroInspector inspecterAero;

        private Entity                            CurrentEditingEntity    = null;
        private Keyframe                          CurrentEditingKeyframe = null;
        private PacketPeep.Systems.Tinker.Message CurrentEditingMessage  = null;

        private List<Action> NextFrameActions = new();

        public TinkerTab()
        {
            CreateDefaultMeta();

            RServer = new ReplayServer(Config.Inst.ReplayServer.ListenPort);
            RServer.Start();
        }

        protected override void SubmitContent()
        {
            DoFrameActions();

            WorkspaceNode();

            DrawOverview();

            DrawHexInspector();
            DrawInspector();
        }

        private unsafe void WorkspaceNode()
        {
            var wClass = new ImGuiWindowClass();
            wClass.DockNodeFlagsOverrideSet = ImGuiDockNodeFlags.NoWindowMenuButton | ImGuiDockNodeFlags.NoCloseButton | ImGuiDockNodeFlags.NoDockingOverMe;
            ImGuiNative.igSetNextWindowClass(&wClass);
            ImGui.Begin("Workspace");
            ImGui.End();
        }

        protected override void CreateDockSpace(Vector2 size)
        {
            ImGui.DockBuilderSplitNode(DockSpaceID, ImGuiDir.Left, 0.2f, out var leftId, out var rightId);
            ImGui.DockBuilderSplitNode(rightId, ImGuiDir.Left, 0.5f, out var midLeftId, out var midRightId);
            //ImGui.DockBuilderSplitNode(rightTopId, ImGuiDir.Left, 0.2f, out var rightTopLeftId, out var rightTopRight);

            ImGui.DockBuilderDockWindow("Overview", leftId);
            //ImGui.DockBuilderDockWindow("Logs", rightBottomId);
            ImGui.DockBuilderDockWindow("Hex View Inspector", midLeftId);
            ImGui.DockBuilderDockWindow("Inspector", midRightId);
        }

        protected override void SubmitMainMenu()
        {
            if (ImGui.BeginMenu("Scene")) {
                if (ImGui.MenuItem("New Scene")) {
                    Scene = CreateDefaultScene();
                }

                if (ImGui.MenuItem("Save Scene")) {
                }

                if (ImGui.MenuItem("Open Scene")) {
                }

                ImGui.EndMenu();
            }

            ThemeManager.PushFont(Font.FAS);
            if (ImGui.Button("")) {
                SendScene();
            }

            ThemeManager.PopFont();

            ImGui.Checkbox("Resend on change", ref ResendOnChange);
        }

        private void DoFrameActions()
        {
            foreach (var action in NextFrameActions) {
                action();
            }

            NextFrameActions.Clear();
        }

        private unsafe void DrawOverview()
        {
            if (ImGui.Begin("Overview")) {
                ImTool.Widgets.RenderTitle("World Settings");
                {
                    ImGui.Indent();
                    ImGui.Text("Zone: ");
                    ImGui.SameLine();
                    ImGui.SetNextItemWidth(80);
                    ImGui.InputInt("###ZoneId", ref Meta.ZoneId, 0, 0);
                    ImGui.SameLine();

                    ImGui.Text("Time of Day: ");
                    ImGui.SameLine();
                    double timeOfDay = Meta.TimeOfDay;
                    double minVal    = 0d;
                    double manVal    = 01d;
                    ImGui.SetNextItemWidth(-1);
                    ImGui.DragScalar("###TimeOfDay", ImGuiDataType.Double, (IntPtr) (&timeOfDay), 0.01f, (IntPtr) (&minVal), (IntPtr) (&manVal));
                    Meta.TimeOfDay = timeOfDay;
                    ImGui.Unindent();
                }

                ImTool.Widgets.RenderTitle("Entites");
                {
                    var uuid = 0;
                    ImGui.Indent();
                    foreach (var entity in Scene.Entities) {
                        ImGui.SetNextItemWidth(-50);
                        if (ImGui.CollapsingHeader($"{entity.Name} ({entity.Id})")) {
                            ImGui.Indent();
                            {
                                ImTool.Widgets.RenderTitle("Keyframes");
                                ImGui.Indent();
                                {
                                    if (ImGui.Button("Add new keyframe", new Vector2(-1, 0))) {
                                    }

                                    foreach (var keyframe in entity.Keyframes) {
                                        var controllerData = PacketPeepTool.PcktDb.ControllerList[keyframe.Id];
                                        ImGui.Text($"{controllerData.Name} ({keyframe.Id})".PadRight(40));
                                        ImGui.SameLine();
                                        DrawIconButton($"###{uuid++}", () => EditKeyframe(entity, keyframe));
                                        ImGui.SameLine();
                                        DrawIconButton($"###{uuid++}", () => SendKeyframe(entity, keyframe));
                                        ImGui.SameLine();
                                        DrawIconButton($"###{uuid++}", () => NextFrameActions.Add(() => DeleteKeyframe(entity, keyframe)));
                                    }
                                }
                                ImGui.Unindent();

                                ImTool.Widgets.RenderTitle("Messages");
                                ImGui.Indent();
                                {
                                    if (ImGui.Button("Add new message", new Vector2(-1, 0))) {
                                    }

                                    foreach (var message in entity.Messages) {
                                    }
                                }
                                ImGui.Unindent();
                            }
                            ImGui.Unindent();
                        }
                    }

                    ImGui.Unindent();
                }
            }

            ImGui.End();
        }

        private void DrawInspector()
        {
            if (ImGui.Begin("Inspector")) {
                var hasChanged = inspecterAero?.Draw();

                if (inspecterAero != null && inspectorHexView != null) {
                    var data       = new byte[5000];
                    var packedSize = inspecterAero.AeroObj.Pack(data);
                    var packedData = data.AsSpan()[..packedSize].ToArray();

                    if (inspectorHexView.Bytes != null && !inspectorHexView.Bytes.SequenceEqual(packedData)) {
                        if (CurrentEditingKeyframe != null) {
                            SendKeyframe(CurrentEditingEntity, CurrentEditingKeyframe);
                        }
                        else {
                            SendMessage(CurrentEditingEntity, CurrentEditingMessage);
                        }

                        //SendScene();
                    }

                    inspectorHexView.SetData(packedData, Array.Empty<HexView.HighlightSection>());
                }
            }

            ImGui.End();
        }

        private void DrawHexInspector()
        {
            if (ImGui.Begin("Hex View Inspector")) {
                inspectorHexView?.Draw();
            }

            ImGui.End();
        }

        private void DrawIconButton(string icon, Action action)
        {
            ThemeManager.PushFont(Font.FAS);
            if (ImGui.Button(icon)) {
                action();
            }

            ThemeManager.PopFont();
        }

        private void EditKeyframe(Entity entity, Keyframe keyframe)
        {
            inspectorHexView       = new HexView();
            inspecterAero          = new AeroInspector(keyframe.Frame, null);
            CurrentEditingEntity   = entity;
            CurrentEditingKeyframe = keyframe;
            CurrentEditingMessage  = null;
        }

        private void EditMessage(Entity entity, PacketPeep.Systems.Tinker.Message message)
        {
            inspectorHexView       = new HexView();
            inspecterAero          = new AeroInspector(message.Msg, null);
            CurrentEditingEntity   = entity;
            CurrentEditingKeyframe = null;
            CurrentEditingMessage  = message;
        }

        private void DeleteKeyframe(Entity entity, Keyframe keyframe)
        {
            entity.Keyframes.Remove(keyframe);
        }

        private void DeleteMessage(Entity entity, PacketPeep.Systems.Tinker.Message message)
        {
            entity.Messages.Remove(message);
        }

        private void SendKeyframe(Entity entity, Keyframe keyframe, uint? timespanOverride = null)
        {
            var timeSpan = timespanOverride ?? (uint) PlaybackTimespan.Elapsed.TotalMilliseconds;
            RServer.SendControllerRemove(keyframe.Id, entity.Id, timeSpan);
            RServer.SendKeyframe(keyframe, entity.Id, timeSpan);
        }

        private void SendMessage(Entity entity, PacketPeep.Systems.Tinker.Message message)
        {
        }

        private void CreateDefaultMeta()
        {
            Meta = new MetaSection
            {
                Version               = 4,
                ZoneId                = 12,
                Description           = "(no recording description)",
                LocalDateString       = "Fri May 01 15:08:15 2015",
                Position              = new Vector3(),
                Rotation              = new Vector4(),
                CharacterGUID         = 1,
                CharacterName         = "Aero",
                FirefallVersionString = "Firefall (v1.5.1962)",
                TimeStamp             = 1430489262787128,
                FictionalDateString   = "Friday, May 1.589 Zulu 2238",

                Month         = 5,
                Day           = 1,
                RealYear      = 2015,
                FictionalYear = 2238,

                TimeOfDay = 0.2f,

                Unk2 = new byte[18]
                {
                    0x00, 0x01, 0xFB, 0x70, 0x05, 0x08, 0x8B, 0x1C, 0x55, 0x14, 0x00, 0xBD, 0x00, 0xFC, 0x61, 0x43,
                    0x55, 0x14
                },
                Unk3 = new byte[18]
                {
                    0x00, 0xF6, 0x95, 0x96, 0x7C, 0xE6, 0xD6, 0x3F, 0x03, 0x00, 0x58, 0x72, 0x3D, 0x24, 0xD0, 0xDA,
                    0x3F, 0x03
                },
                Unk4 = new byte[5]
                {
                    0x00, 0x00, 0x20, 0x42, 0x03
                }
            };
        }

        private Scene CreateDefaultScene()
        {
            var scene = new Scene();

            var entity = new Entity
            {
                Name = "Test Entity",
                Id   = 1
            };

            var oKeyframe = new Keyframe(8);
            var data1 = new byte[]
            {
                0xFE, 0xFF, 0xFF, 0xFF, 0x41, 0x65, 0x72, 0x6f, 0x0, 0x41, 0x65, 0x72, 0x6f, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x2A, 0x27, 0x0, 0x0, 0x11, 0x27, 0x0, 0x0, 0xAA, 0x0,
                0xE, 0x0, 0x0, 0x0, 0x0, 0xEB, 0x3, 0x0, 0x0, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x85, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x87, 0x27, 0x0, 0x0, 0xF, 0x3E, 0x1, 0x0, 0x0, 0x0, 0x5, 0x86, 0x71, 0xFF, 0xFF, 0x86, 0x71, 0xFF, 0xFF,
                0x16, 0xF8, 0x16, 0xF8, 0xD3, 0xE0, 0x2E, 0x48, 0xD3, 0xE0, 0x2E, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5B, 0x54, 0x4D, 0x57, 0x5D, 0x0, 0x21, 0x10, 0x25, 0xD7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x21, 0x10, 0x25, 0xD7, 0x84, 0x41, 0xE2, 0x0,
                0x6, 0x21, 0x10, 0x25, 0xD7, 0x1, 0x2, 0x32, 0x0, 0x9, 0x8E, 0xDC, 0xFF, 0xFF, 0x9, 0x0, 0x0, 0x32, 0x0, 0xF2, 0x0, 0x20, 0x0, 0x0, 0xF2, 0x0, 0x0, 0x64, 0xEB, 0x3A, 0x0, 0x0, 0x21, 0x10, 0x25, 0xD7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0xFC, 0x7B, 0x2, 0x8, 0x58, 0x54, 0x52, 0x1F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
            };
            oKeyframe.Frame.Unpack(data1);
            entity.Keyframes.Add(oKeyframe);

            var eKeyframe = new Keyframe(9);
            var data2 = new byte[]
            {
                0x0, 0xFE, 0x27, 0x1, 0x0, 0xFF, 0x0, 0x0, 0x12, 0x74, 0xEE, 0x1, 0x0, 0xFF, 0x0, 0x0, 0xE2, 0xEB, 0x1, 0x0, 0xFF, 0x0, 0x0, 0x4D, 0xF4, 0x1, 0x0, 0xFF, 0x0, 0x0,
                0x31, 0x26, 0x2, 0x0, 0xFF, 0x0, 0x0, 0x3E, 0x28, 0x2, 0x0, 0xFF, 0x0, 0x0, 0x7E, 0x32, 0x2, 0x0, 0xFF, 0x0, 0x0, 0x73, 0xFD, 0x1, 0x0, 0xFF, 0x0, 0x0, 0x73, 0xFD, 0x1, 0x0, 0xFF, 0x0, 0x0, 0x30, 0x4F, 0x1, 0x0, 0xFF, 0x0, 0x0, 0x31,
                0x4F, 0x1, 0x0, 0xFF, 0x0, 0x0, 0x39, 0x4F, 0x1, 0x0, 0xFF, 0x0, 0x0, 0x44, 0x4F, 0x1, 0x0, 0xFF, 0x0, 0x0, 0x7A, 0x4F, 0x1, 0x0, 0xFF, 0x0, 0x0, 0x87, 0x4F, 0x1, 0x0, 0xFF, 0x0, 0x0, 0xB3, 0x4F, 0x1, 0x0, 0xFF, 0x0, 0x0, 0x66, 0x50,
                0x1, 0x0, 0xFF, 0x0, 0x0, 0x9B, 0x50, 0x1, 0x0, 0xFF, 0x0, 0x0, 0x66, 0x73, 0x1, 0x0, 0xFF, 0x0, 0x0, 0x1, 0x36, 0x27, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0x91, 0xB3, 0xE8, 0xB1, 0xB0, 0x98, 0x2E, 0x28, 0xE4, 0xA8, 0xBB, 0xB4, 0xD0,
                0xB1, 0x78, 0x33, 0x6D, 0xAA, 0x9E, 0xB7, 0xC3, 0x2E, 0x84, 0x3C, 0xFF, 0x0, 0x7, 0x4, 0x21, 0xFF, 0xFF, 0x0, 0x0, 0xD3, 0x9C, 0x0, 0x0, 0x86, 0x31, 0x0, 0x0, 0x49, 0x4A, 0xAE, 0x7B, 0xB2, 0x94, 0x41, 0x31, 0x80, 0xCC, 0x41, 0x31,
                0x80, 0xCC, 0x1, 0x0, 0x9, 0x4, 0x0, 0x0, 0x1, 0x26, 0x27, 0x0, 0x0, 0xA6, 0x59, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF3, 0x28, 0x1, 0x0, 0xFF, 0x0, 0x0, 0x6, 0xA9, 0xBC, 0x1, 0x0, 0x3, 0x0, 0x0, 0xA, 0x5, 0x2,
                0x0, 0x0, 0x0, 0x0, 0xB3, 0x74, 0x1, 0x0, 0x1, 0x0, 0x0, 0x90, 0xF, 0x2, 0x0, 0x2, 0x0, 0x0, 0x91, 0xFB, 0x1, 0x0, 0x5, 0x0, 0x0, 0x25, 0xF8, 0x1, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA0, 0xE, 0x2, 0x0,
                0x0, 0x0, 0x0, 0x1, 0x35, 0xCF, 0x1, 0x0, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x3, 0xA1, 0x0, 0x0, 0x0, 0xA1, 0x0, 0xCB, 0x5A, 0xA1, 0x0, 0x88, 0xBF, 0x1, 0x4, 0x9, 0xC9, 0x1, 0x0, 0x1, 0xB7, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xB0, 0x26, 0x2, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x2C, 0x32, 0xA2, 0x10, 0x31, 0x54, 0x4, 0x21, 0xB4,
                0x65, 0x1, 0x5, 0xE5, 0xC8, 0x1, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x63, 0x35, 0x0, 0x5, 0x0, 0x70, 0x7A, 0xDE, 0x42, 0x6, 0x0, 0xA5,
                0x23, 0x30, 0x46, 0x7, 0x0, 0xC1, 0x18, 0x7D, 0x43, 0xC, 0x0, 0x0, 0x0, 0x48, 0x41, 0x23, 0x0, 0x0, 0x80, 0x31, 0x44, 0x24, 0x0, 0x0, 0x0, 0x7A, 0x43, 0x25, 0x0, 0x0, 0x0, 0xE0, 0x3F, 0x7A, 0x0, 0x4C, 0xFB, 0x5E, 0x45, 0x7B, 0x0,
                0x75, 0x6A, 0x1E, 0x41, 0x1D, 0x3, 0x49, 0x92, 0x14, 0x41, 0x1E, 0x3, 0x0, 0x0, 0x80, 0x40, 0xBF, 0x3, 0xF6, 0x98, 0xC4, 0x3F, 0x58, 0x4, 0x76, 0x71, 0xBB, 0x40, 0x61, 0x4, 0x0, 0x0, 0x16, 0x43, 0x81, 0x4, 0x1E, 0x6E, 0xAD, 0x43,
                0x57, 0x5, 0x0, 0x0, 0xC2, 0x42, 0x58, 0x5, 0x0, 0x0, 0xC8, 0x42, 0x5A, 0x5, 0x66, 0x66, 0xB0, 0x42, 0x5B, 0x5, 0x0, 0x0, 0xC8, 0x42, 0x5C, 0x5, 0x33, 0x33, 0xD9, 0x42, 0x61, 0x5, 0x33, 0x33, 0x8, 0x43, 0x73, 0x5, 0x33, 0x33, 0x7,
                0x42, 0x88, 0x5, 0x31, 0x2A, 0xD9, 0x40, 0x9F, 0x5, 0x0, 0x0, 0x20, 0x41, 0xAB, 0x5, 0x0, 0x0, 0xC8, 0x42, 0xCA, 0x5, 0xB8, 0x1E, 0x15, 0x41, 0xE, 0x6, 0x14, 0xAE, 0x5F, 0x40, 0x10, 0x6, 0x40, 0x2, 0x2E, 0x42, 0x11, 0x6, 0x66, 0x66,
                0x46, 0x41, 0x12, 0x6, 0x83, 0xAF, 0x27, 0x41, 0xC6, 0x6, 0x97, 0x12, 0x82, 0x45, 0xC7, 0x6, 0xF3, 0xB9, 0x7E, 0x41, 0xC8, 0x6, 0x0, 0x0, 0x48, 0x42, 0xC9, 0x6, 0xE7, 0x76, 0x4E, 0x44, 0xCD, 0x6, 0x4C, 0x37, 0xBD, 0x40, 0xCF, 0x6,
                0x0, 0x0, 0x80, 0x40, 0xD1, 0x6, 0x80, 0x22, 0x15, 0x41, 0xD2, 0x6, 0xC0, 0xCF, 0x96, 0x41, 0xF9, 0x6, 0x83, 0xC0, 0x8A, 0x3F, 0x1B, 0x7, 0x0, 0x0, 0x80, 0x3F, 0x21, 0x7, 0x0, 0x0, 0xC0, 0x3F, 0x22, 0x7, 0x0, 0x0, 0x10, 0x41, 0x23,
                0x7, 0x33, 0x33, 0x13, 0x40, 0x24, 0x7, 0x67, 0x66, 0x26, 0x40, 0x2A, 0x7, 0x66, 0x66, 0x26, 0x40, 0xC3, 0x7, 0x0, 0x0, 0x60, 0x41, 0xCC, 0x7, 0x0, 0x0, 0xC8, 0x42, 0xDA, 0x7, 0x0, 0x0, 0x48, 0x42, 0xDB, 0x7, 0x33, 0x33, 0x77, 0x41,
                0xDC, 0x7, 0x33, 0x33, 0x43, 0x41, 0xE1, 0x7, 0x66, 0x66, 0xAC, 0x41, 0xE2, 0x7, 0x0, 0x0, 0xC, 0x42, 0xE3, 0x7, 0x0, 0x80, 0xD7, 0x42, 0x0, 0x0, 0x0, 0x0, 0xB, 0x0, 0x11, 0x0, 0x7F, 0x68, 0xC3, 0x43, 0x14, 0x0, 0x0, 0xCD, 0x24, 0x42,
                0xBA, 0x3, 0x40, 0xC9, 0x7, 0x45, 0xBC, 0x3, 0xFD, 0x7, 0xB1, 0x42, 0xBD, 0x3, 0x0, 0x0, 0x4, 0x43, 0xBE, 0x3, 0xE9, 0xB0, 0x4F, 0x3F, 0x7, 0x6, 0x0, 0x0, 0x60, 0x41, 0xA, 0x6, 0x0, 0x0, 0xF0, 0x41, 0x82, 0x6, 0x1F, 0x85, 0xF6, 0x42,
                0x12, 0x7, 0x0, 0x0, 0x7A, 0x43, 0x13, 0x7, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x11, 0x0, 0x99, 0x53, 0x9C, 0x42, 0x14, 0x0, 0x40, 0x0, 0xCE, 0x42, 0xBA, 0x3, 0x73, 0x4A, 0x43, 0x43, 0xBC, 0x3, 0x0, 0xC, 0xBF, 0x42,
                0xBD, 0x3, 0x0, 0x0, 0xD2, 0x42, 0xBE, 0x3, 0x6E, 0xDB, 0x36, 0x40, 0x82, 0x6, 0x0, 0x0, 0xE7, 0x42, 0x13, 0x7, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x11, 0x27, 0x0, 0xC0, 0x86, 0xBD, 0x12, 0x27, 0x7B, 0x14, 0xAE, 0xBD,
                0x13, 0x27, 0xD7, 0xA3, 0xD0, 0x3F, 0x14, 0x27, 0xA4, 0x70, 0x93, 0x3B, 0x17, 0x27, 0xA, 0xD7, 0xA3, 0xBD, 0x18, 0x27, 0x47, 0xE1, 0x92, 0x3F, 0x1A, 0x27, 0x52, 0xB8, 0x96, 0x3F, 0x1B, 0x27, 0x14, 0xAE, 0xC7, 0x3D, 0x1C, 0x27, 0x9D,
                0xEF, 0xA7, 0x3D, 0x20, 0x27, 0x3D, 0xA, 0x3, 0x3C, 0x23, 0x27, 0x5C, 0x8F, 0xC2, 0x3D, 0x33, 0x27, 0xAE, 0x47, 0x61, 0x3E, 0x38, 0x27, 0x8F, 0xC2, 0xF5, 0x3C, 0x3B, 0x27, 0x96, 0x43, 0x8B, 0x3D, 0x3D, 0x27, 0x0, 0x0, 0x0, 0x3F, 0x44,
                0x27, 0x96, 0x43, 0xB, 0x3D, 0x9, 0x0, 0x13, 0x27, 0x1, 0x0, 0xAC, 0x40, 0x17, 0x27, 0xD9, 0x5E, 0x46, 0xBE, 0x18, 0x27, 0x5A, 0x50, 0x16, 0x3F, 0x1A, 0x27, 0xA7, 0xF6, 0x0, 0x3F, 0x1B, 0x27, 0xA7, 0xF6, 0x0, 0x3F, 0x32, 0x27, 0xD7,
                0xA3, 0xC4, 0x3B, 0x33, 0x27, 0x8D, 0x6, 0xF0, 0x3D, 0x3D, 0x27, 0x2C, 0x7A, 0xCC, 0x3D, 0x44, 0x27, 0xA, 0xD7, 0x23, 0x3C, 0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
            };
            eKeyframe.Frame.Unpack(data2);
            entity.Keyframes.Add(eKeyframe);

            var cKeyframe = new Keyframe(11);
            var data3 = new byte[]
            {
                0xA0, 0xF5, 0xFF, 0xFF, 0xFF, 0xF, 0x95, 0x41, 0x95, 0x41, 0x95, 0x41, 0xA5, 0xF4, 0xA3, 0x9E, 0x1E, 0xD4, 0x81, 0xA6, 0x73, 0xA0, 0xB, 0xA2, 0xA3, 0x9E, 0x81,
                0xA6, 0xA3, 0x9E, 0xC6, 0xCB, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x56, 0x4E, 0x4A, 0x9C, 0x0, 0x0, 0x80, 0x3F, 0x56, 0x4E, 0x4A, 0x9C, 0x56, 0x4E, 0x4A, 0x9C, 0x1, 0x65, 0x7, 0x9C, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0,
                0x0, 0xD8, 0x1, 0x0, 0x0, 0x0, 0x1, 0xBE, 0x11, 0xF8, 0x20, 0x24, 0xD9, 0x7F, 0x95, 0x41, 0x50, 0x9D, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x3F, 0x0, 0x0, 0x0, 0x0, 0x44, 0x2C, 0x0, 0x0, 0x0, 0x1, 0xBE, 0x11, 0xF8, 0x20, 0x24, 0xD9, 0x7F, 0x95, 0x41, 0x50, 0x9D, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x3F, 0x0, 0x0, 0x0, 0x0, 0xD8, 0x34, 0x0, 0x0, 0x0, 0x1, 0xBE, 0x11, 0xF8, 0x20, 0x24, 0xD9, 0x7F, 0x95, 0x41, 0x50, 0x9D, 0x1, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x3F, 0x0, 0x0, 0x0, 0x0, 0x3B, 0x1, 0x0, 0x0, 0x0, 0x1, 0xBE, 0x11,
                0xF8, 0x20, 0x24, 0xD9, 0x7F, 0xA5, 0xF4, 0xDF, 0x9D, 0x0, 0x5A, 0xD, 0x0, 0x0, 0x0, 0x1, 0xBE, 0x11, 0xF8, 0x20, 0x24, 0xD9, 0x7F, 0xA3, 0x9E, 0xE3, 0x9D, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x3F, 0x0, 0x0, 0x70, 0x41, 0x59, 0xD, 0x0, 0x0, 0x0, 0x1, 0xBE, 0x11, 0xF8, 0x20, 0x24, 0xD9, 0x7F, 0x81, 0xA6, 0xE3, 0x9D, 0x0, 0xA6,
                0x2D, 0x0, 0x0, 0x0, 0x1, 0xBE, 0x11, 0xF8, 0x20, 0x24, 0xD9, 0x7F, 0xA3, 0x9E, 0xE3, 0x9D, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x3F, 0x0, 0x0, 0x70, 0x41, 0x5B, 0x1E, 0x0, 0x0, 0x0, 0x1, 0xBE, 0x11, 0xF8, 0x20, 0x24, 0xD9, 0x7F, 0xA3, 0x9E, 0xE3, 0x9D, 0x0, 0x0, 0x1E, 0xD4, 0xE3, 0x9D, 0x0, 0x1E, 0x8A, 0x7E, 0x9D, 0x99, 0x0,
                0x2D, 0x75, 0x99, 0x0, 0x2D, 0x75, 0x1, 0x0, 0x0, 0xAA, 0x9A, 0xE3, 0x9D, 0x7D, 0x5F, 0x19, 0x9D, 0x6D, 0x77, 0x19, 0x9D, 0x19, 0xE9, 0xE0, 0x9D, 0xE5, 0x7, 0x59, 0x9D, 0x6C, 0xAD, 0x65, 0x9C, 0xA9, 0xF0, 0xE0, 0x9D, 0x8F, 0x6C, 0x19,
                0x9D, 0x0, 0x0, 0x80, 0x3F, 0xFA, 0x79, 0xE1, 0x9D, 0x40, 0xAC, 0xE2, 0x9D, 0x47, 0xAD, 0xD3, 0x9D, 0x35, 0x57, 0x4F, 0x9D, 0x95, 0x41, 0x50, 0x9D, 0x0, 0x1, 0x0, 0x0, 0x1E, 0xD4, 0xE3, 0x9D, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0xE6, 0x8B, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7A, 0xED, 0x97, 0xD7, 0x7F, 0x73, 0x55, 0xE7, 0xAF, 0xED, 0xE7, 0x77
            };
            cKeyframe.Frame.Unpack(data3);
            entity.Keyframes.Add(cKeyframe);

            var mKeyframe = new Keyframe(12);
            var data4 = new byte[]
            {
                0x19, 0xD1, 0x32, 0x43, 0xBD, 0x2F, 0x7A, 0x43, 0x74, 0xF7, 0xF5, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF1, 0x87, 0xE9, 0x3E, 0xD9, 0xD1, 0x63, 0xBF, 0xD5,
                0x5D, 0x34, 0xBF, 0x48, 0x91, 0x1A, 0x3F, 0xE, 0xEC, 0xBE, 0xBE, 0x0, 0x10, 0x6D, 0x1F, 0x25, 0xD7
            };
            mKeyframe.Frame.Unpack(data4);
            entity.Keyframes.Add(mKeyframe);

            //entity.Keyframes.Add(mKeyframe);

            scene.Entities.Add(entity);

            return scene;
        }

        public void SendScene()
        {
            var timeSpan = (uint) PlaybackTimespan.Elapsed.TotalMilliseconds;
            RServer.SendMeta(Meta, timeSpan);

            foreach (var entity in Scene.Entities) {
                foreach (var keyframe in entity.Keyframes) {
                    SendKeyframe(entity, keyframe, timeSpan);
                }
            }
        }
    }
}